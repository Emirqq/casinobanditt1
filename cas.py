import random
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.filters import Command
import json
import os

# –ü—É—Ç–∏ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º
PHOTOS_DIR = "photos"
ROULETTE_TABLE = os.path.join(PHOTOS_DIR, "roulette_table.jpg")
PHOTO_WIN = os.path.join(PHOTOS_DIR, "win.jpg")
PHOTO_LOSE = os.path.join(PHOTOS_DIR, "lose.jpg")

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather)
BOT_TOKEN = "8202832824:AAFV9wKFYfUfxdZa2KPM63WkMX5MsBhZfIE"

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1915644408

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = "users_data.json"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é)
user_bet_selection = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def load_users():
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_users(users):
    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)

# --- –†–∞–±–æ—Ç–∞ —Å username –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ ---
def normalize_username(name: str) -> str:
    if not name:
        return ""
    n = name.strip()
    if n.startswith('@'):
        n = n[1:]
    return n.lower()

def remember_user(user):
    try:
        uid = user.id
    except Exception:
        return
    users = load_users()
    if str(uid) not in users:
        users[str(uid)] = {'balance': 50000}
    try:
        uname = getattr(user, 'username', None)
        if uname:
            users[str(uid)]['username'] = normalize_username(uname)
    except Exception:
        pass
    save_users(users)

def find_user_id_by_username(username: str):
    if not username:
        return None
    uname = normalize_username(username)
    users = load_users()
    for uid, data in users.items():
        if normalize_username(data.get('username', '')) == uname:
            try:
                return int(uid)
            except Exception:
                continue
    return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_balance(user_id):
    users = load_users()
    return users.get(str(user_id), {}).get('balance', 50000)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_balance(user_id, amount):
    users = load_users()
    if str(user_id) not in users:
        users[str(user_id)] = {'balance': 50000}
    users[str(user_id)]['balance'] = users[str(user_id)]['balance'] + amount
    save_users(users)

# –ù–æ–º–µ—Ä–∞ –Ω–∞ —Ä—É–ª–µ—Ç–∫–µ (00, 0, 1-36)
def spin_roulette():
    return random.randint(0, 37)  # 37 = 00 –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ

# –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –Ω–æ–º–µ—Ä–∞
def get_color(number):
    if number == 0 or number == 37:
        return "–∑–µ–ª–µ–Ω—ã–π"
    
    red_numbers = [1, 3, 5, 7, 9, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 34, 36]
    if number in red_numbers:
        return "–∫—Ä–∞—Å–Ω—ã–π"
    return "—á–µ—Ä–Ω—ã–π"

# –ü–æ–ª—É—á–∏—Ç—å —á–µ—Ç–Ω–æ—Å—Ç—å
def is_even(number):
    if number == 0 or number == 37:
        return None
    return number % 2 == 0

# –ü–æ–ª—É—á–∏—Ç—å —Ä—è–¥ (–¥—é–∂–∏–Ω–∞)
def get_dozen(number):
    if number == 0 or number == 37:
        return None
    if 1 <= number <= 12:
        return 1
    elif 13 <= number <= 24:
        return 2
    elif 25 <= number <= 36:
        return 3
    return None

# –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å—Ç–∞–≤–æ–∫ (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—É–º–º—É –≤—ã–∏–≥—Ä—ã—à–∞ –≤–∫–ª—é—á–∞—è —Å—Ç–∞–≤–∫—É)
def calculate_payout(strategy, bet_amount, winning_number):
    color = get_color(winning_number)
    even = is_even(winning_number)
    bet_win_num = winning_number if winning_number != 37 else 0
    dozen = get_dozen(winning_number)
    
    # –¶–≤–µ—Ç–∞
    if strategy in ["color_red", "–∫—Ä–∞—Å–Ω–æ–µ", "red", "—Ä–µ–¥"]:
        return bet_amount * 2 if color == "–∫—Ä–∞—Å–Ω—ã–π" else 0
    elif strategy in ["color_black", "—á–µ—Ä–Ω–æ–µ", "black", "–±–ª–µ–∫"]:
        return bet_amount * 2 if color == "—á–µ—Ä–Ω—ã–π" else 0
    
    # –ó–µ–ª–µ–Ω–æ–µ
    elif strategy in ["green", "–∑–µ—Ä–æ", "0", "00"]:
        return bet_amount * 36 if (winning_number == 0 or winning_number == 37) else 0
    
    # –ß–µ—Ç–Ω–æ—Å—Ç—å
    elif strategy in ["even", "—á–µ—Ç", "—á–µ—Ç–Ω–æ–µ"]:
        return bet_amount * 2 if even is True else 0
    elif strategy in ["odd", "–Ω–µ—á–µ—Ç", "–Ω–µ—á–µ—Ç–Ω–æ–µ"]:
        return bet_amount * 2 if even is False else 0
    
    # –î–∏–∞–ø–∞–∑–æ–Ω—ã
    elif strategy in ["low", "1-18"]:
        return bet_amount * 2 if (1 <= bet_win_num <= 18) else 0
    elif strategy in ["high", "19-36"]:
        return bet_amount * 2 if (19 <= bet_win_num <= 36) else 0
    
    # –°–µ–∫—Ç–æ—Ä–∞ (–¥—é–∂–∏–Ω—ã)
    elif strategy.startswith("dozen_"):
        bet_dozen = int(strategy.split("_")[1])
        return bet_amount * 3 if dozen == bet_dozen else 0
    elif strategy in ["1–¥", "2–¥", "3–¥", "1—Å—Ç", "2—Å—Ç", "3—Å—Ç", "1—Å–µ–∫—Ç–æ—Ä", "2—Å–µ–∫—Ç–æ—Ä", "3—Å–µ–∫—Ç–æ—Ä"]:
        bet_dozen_map = {"1–¥": 1, "2–¥": 2, "3–¥": 3, "1—Å—Ç": 1, "2—Å—Ç": 2, "3—Å—Ç": 3,
                         "1—Å–µ–∫—Ç–æ—Ä": 1, "2—Å–µ–∫—Ç–æ—Ä": 2, "3—Å–µ–∫—Ç–æ—Ä": 3}
        bet_dozen = bet_dozen_map.get(strategy)
        return bet_amount * 3 if dozen == bet_dozen else 0
    
    # –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    elif strategy.startswith("number_"):
        bet_number = int(strategy.split("_")[1])
        return bet_amount * 36 if bet_win_num == bet_number else 0
    
    # –ü—Ä—è–º–æ–π –≤–≤–æ–¥ —á–∏—Å–ª–∞
    elif strategy.isdigit():
        bet_number = int(strategy)
        if bet_number == 0 and (winning_number == 0 or winning_number == 37):
            return bet_amount * 36
        elif bet_number == bet_win_num:
            return bet_amount * 36
    
    return 0

@dp.message(Command("start"))
async def cmd_start(message: Message):
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        remember_user(message.from_user)
    except Exception:
        pass
    user_id = message.from_user.id
    balance = get_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–¥–º–∏–Ω –ª–∏ —ç—Ç–æ
    is_admin = user_id == ADMIN_ID
    
    keyboard_buttons = [
        [InlineKeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette_menu")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="balance")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
        [InlineKeyboardButton(text="üéÅ –ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="reset_confirm")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞
    if is_admin:
        keyboard_buttons.append([InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    text = (
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    photo_path = os.path.join(PHOTOS_DIR, "main_menu.jpg")
    photo_exists = False
    
    if os.path.exists(photo_path):
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".png")):
        photo_path = photo_path.replace(".jpg", ".png")
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".jpeg")):
        photo_path = photo_path.replace(".jpg", ".jpeg")
        photo_exists = True
    
    if photo_exists:
        await message.answer_photo(FSInputFile(photo_path), caption=text, reply_markup=keyboard)
    else:
        await message.answer(text, reply_markup=keyboard)

@dp.callback_query(F.data == "balance")
async def show_balance(callback: CallbackQuery):
    await callback.answer()
    
    user_id = callback.from_user.id
    balance = get_balance(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ
    users = load_users()
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('balance', 0), reverse=True)
    
    # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_place = 1
    for i, (uid, data) in enumerate(sorted_users, 1):
        if str(uid) == str(user_id):
            user_place = i
            break
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user_chat = await bot.get_chat(user_id)
        username = f"@{user_chat.username}" if user_chat.username else user_chat.first_name
    except:
        username = f"–ò–≥—Ä–æ–∫ {user_id}"
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—Ç–∞
    medal = "ü•á" if user_place == 1 else "ü•à" if user_place == 2 else "ü•â" if user_place == 3 else f"#{user_place}"
    
    text = (
        f"üë§ –ü–†–û–§–ò–õ–¨\n\n"
        f"–ò–≥—Ä–æ–∫: {username}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
        f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {medal}\n"
        f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(sorted_users)}"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ
    photo_path = os.path.join(PHOTOS_DIR, "profile.jpg")
    photo_exists = False
    
    if os.path.exists(photo_path):
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".png")):
        photo_path = photo_path.replace(".jpg", ".png")
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".jpeg")):
        photo_path = photo_path.replace(".jpg", ".jpeg")
        photo_exists = True
    
    # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—è–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    try:
        await callback.message.delete()
    except:
        pass
    
    if photo_exists:
        await bot.send_photo(user_id, FSInputFile(photo_path), caption=text, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, text, reply_markup=keyboard)

@dp.message(Command("pay"))
async def cmd_pay(message: Message):
    sender_id = message.from_user.id
    try:
        remember_user(message.from_user)
    except Exception:
        pass
    args_text = (message.text or "").strip()

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
    # 1) /pay @username 100
    # 2) /pay 100 @username
    # 3) –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /pay 100
    # 4) /pay user_id 100 (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä—è–º–æ–≥–æ ID)

    # –ò—â–µ–º —Å—É–º–º—É –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–ª–∏ –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –≤ —Ç–µ–∫—Å—Ç–µ
    tokens = args_text.split()
    # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    if tokens and tokens[0].startswith('/pay'):
        tokens = tokens[1:]

    target_username = None
    target_id = None
    amount = None

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user:
        target_id = message.reply_to_message.from_user.id

    # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ @username –∏ text_mention –≤ —Å—É—â–Ω–æ—Å—Ç—è—Ö
    if not target_id and message.entities:
        for ent in message.entities:
            # –í aiogram v3 —Ç–∏–ø —Å—É—â–Ω–æ—Å—Ç–∏ ‚Äî —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 'mention'
            if ent.type == 'mention':
                target_username = message.text[ent.offset: ent.offset + ent.length]
                break
            if ent.type == 'text_mention' and getattr(ent, 'user', None):
                try:
                    target_id = ent.user.id
                    remember_user(ent.user)
                    break
                except Exception:
                    pass

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ —Å—É–º–º—É
    for t in tokens:
        if t.isdigit():
            amount = int(t)
            break

    # –ï—Å–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ —Ç–æ–∫–µ–Ω–æ–≤
    if not target_id and not target_username and tokens:
        for t in tokens:
            if t.startswith('@'):
                target_username = t
                break
            # –ü—Ä—è–º–æ–π user_id
            if t.isdigit() and int(t) > 10000:
                target_id = int(t)
                break

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    if amount is None or amount <= 0:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞. –ü—Ä–∏–º–µ—Ä: /pay @username 100 –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ /pay 100")
        return

    # –ü–æ–ª—É—á–∞–µ–º chat –ø–æ username, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if not target_id and target_username:
        try:
            chat = await bot.get_chat(target_username)
            target_id = chat.id
        except Exception:
            # –†–µ–∑–µ—Ä–≤: –ø–æ–∏—Å–∫ –ø–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–º username, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç –ø–æ @
            fallback_id = find_user_id_by_username(target_username)
            if fallback_id is None:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É @username.")
                return
            target_id = fallback_id

    if not target_id:
        await message.answer("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ @username, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID.")
        return

    if target_id == sender_id:
        await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–æ–Ω–µ—Ç—ã —Å–∞–º–æ–º—É —Å–µ–±–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if get_balance(sender_id) < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
    update_balance(sender_id, -amount)
    update_balance(target_id, amount)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –∏–º–µ–Ω–∞
    def format_username(uid: int, fallback: str) -> str:
        return fallback

    try:
        s_chat = await bot.get_chat(sender_id)
        sender_name = f"@{s_chat.username}" if s_chat.username else (s_chat.first_name or f"ID {sender_id}")
    except Exception:
        sender_name = f"ID {sender_id}"
    try:
        r_chat = await bot.get_chat(target_id)
        receiver_name = f"@{r_chat.username}" if r_chat.username else (r_chat.first_name or f"ID {target_id}")
    except Exception:
        receiver_name = f"ID {target_id}"

    await message.answer(
        f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_name}\n"
        f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {receiver_name}\n"
        f"–°—É–º–º–∞: {amount} –º–æ–Ω–µ—Ç\n\n"
        f"–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {get_balance(sender_id)} –º–æ–Ω–µ—Ç"
    )

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ /pay@bot
@dp.message(lambda message: message.text and message.text.strip().lower().startswith('/pay'))
async def cmd_pay_alias(message: Message):
    # –ò–∑–±–µ–≥–∞–µ–º –¥–≤–æ–π–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è: –µ—Å–ª–∏ —É–∂–µ –ø–æ–ø–∞–ª–∏ –≤ Command("pay"), —ç—Ç–æ—Ç –Ω–µ –Ω—É–∂–µ–Ω,
    # –Ω–æ aiogram —Å–∞–º –¥–µ–±–∞—É–Ω—Å–∏—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É, –æ—Å—Ç–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ–π –≤—ã–∑–æ–≤
    await cmd_pay(message)

@dp.callback_query(F.data == "reset_confirm")
async def reset_confirm(callback: CallbackQuery):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="reset_yes")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")],
    ])
    text = (
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï!\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–∞–ª–∞–Ω—Å?\n"
        "–í—Å–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç—Ä–∞—á–µ–Ω—ã, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ 30000 –º–æ–Ω–µ—Ç."
    )
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await bot.send_message(callback.from_user.id, text, reply_markup=keyboard)
    await callback.answer()

@dp.callback_query(F.data == "reset_yes")
async def reset_balance(callback: CallbackQuery):
    user_id = callback.from_user.id
    is_admin = user_id == ADMIN_ID
    
    update_balance(user_id, -get_balance(user_id) + 30000)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    text = (
        "‚úÖ –ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 30000 –º–æ–Ω–µ—Ç.\n\n"
        "üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: 30000 –º–æ–Ω–µ—Ç"
    )
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except Exception:
        try:
            await callback.message.delete()
        except Exception:
            pass
        await bot.send_message(user_id, text, reply_markup=keyboard)
    await callback.answer("–ë–∞–ª–∞–Ω—Å —Å–±—Ä–æ—à–µ–Ω!")

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery):
    await callback.answer()
    
    user_id = callback.from_user.id
    balance = get_balance(user_id)
    is_admin = user_id == ADMIN_ID
    
    keyboard_buttons = [
        [InlineKeyboardButton(text="üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="roulette_menu")],
        [InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="balance")],
        [InlineKeyboardButton(text="üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤", callback_data="top_players")],
        [InlineKeyboardButton(text="üéÅ –ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="reset_confirm")],
    ]
    
    if is_admin:
        keyboard_buttons.append([InlineKeyboardButton(text="üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    text = (
        f"üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ!\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:"
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    photo_path = os.path.join(PHOTOS_DIR, "main_menu.jpg")
    photo_exists = False
    
    if os.path.exists(photo_path):
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".png")):
        photo_path = photo_path.replace(".jpg", ".png")
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".jpeg")):
        photo_path = photo_path.replace(".jpg", ".jpeg")
        photo_exists = True
    
    # –í—Å–µ–≥–¥–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ, —á—Ç–æ–±—ã —Ñ–æ—Ç–æ –∑–∞–º–µ–Ω—è–ª–æ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    try:
        await callback.message.delete()
    except:
        pass
    
    if photo_exists:
        await bot.send_photo(user_id, FSInputFile(photo_path), caption=text, reply_markup=keyboard)
    else:
        await bot.send_message(user_id, text, reply_markup=keyboard)

@dp.callback_query(F.data == "roulette_menu")
async def roulette_menu(callback: CallbackQuery):
    user_id = callback.from_user.id
    balance = get_balance(user_id)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üî¥ –ö—Ä–∞—Å–Ω–æ–µ (x2)", callback_data="bet_color_red")],
        [InlineKeyboardButton(text="‚ö´ –ß–µ—Ä–Ω–æ–µ (x2)", callback_data="bet_color_black")],
        [InlineKeyboardButton(text="üü¢ –ó–µ–ª–µ–Ω–æ–µ 0/00 (x36)", callback_data="bet_green")],
        [InlineKeyboardButton(text="üî¢ –ß–µ—Ç–Ω–æ–µ (x2)", callback_data="bet_even"),
         InlineKeyboardButton(text="üî¢ –ù–µ—á–µ—Ç–Ω–æ–µ (x2)", callback_data="bet_odd")],
        [InlineKeyboardButton(text="‚¨áÔ∏è 1-18 (x2)", callback_data="bet_low"),
         InlineKeyboardButton(text="‚¨ÜÔ∏è 19-36 (x2)", callback_data="bet_high")],
        [InlineKeyboardButton(text="üìä 1-–π —Å–µ–∫—Ç–æ—Ä 1-12 (x3)", callback_data="bet_dozen_1")],
        [InlineKeyboardButton(text="üìä 2-–π —Å–µ–∫—Ç–æ—Ä 13-24 (x3)", callback_data="bet_dozen_2")],
        [InlineKeyboardButton(text="üìä 3-–π —Å–µ–∫—Ç–æ—Ä 25-36 (x3)", callback_data="bet_dozen_3")],
        [InlineKeyboardButton(text="üéØ –ù–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (x36)", callback_data="bet_number")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å–æ —Å—Ç–æ–ª–æ–º –∏–ª–∏ —Ç–µ–∫—Å—Ç
    text = (f"üé∞ –†—É–ª–µ—Ç–∫–∞\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–º:\n"
            f"üìù –ü—Ä–∏–º–µ—Ä: ¬´–∫—Ä–∞—Å–Ω–æ–µ 100¬ª –∏–ª–∏ ¬´1—Å—Ç 50¬ª –∏–ª–∏ ¬´–∑–µ—Ä–æ 500¬ª")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ —Å—Ç–æ–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
    table_photo = None
    if os.path.exists(ROULETTE_TABLE):
        table_photo = ROULETTE_TABLE
    elif os.path.exists(ROULETTE_TABLE.replace(".jpg", ".png")):
        table_photo = ROULETTE_TABLE.replace(".jpg", ".png")
    elif os.path.exists(ROULETTE_TABLE.replace(".jpg", ".jpeg")):
        table_photo = ROULETTE_TABLE.replace(".jpg", ".jpeg")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if table_photo:
        await bot.send_photo(
            callback.from_user.id,
            FSInputFile(table_photo),
            caption=text,
            reply_markup=keyboard
        )
    else:
        await bot.send_message(
            callback.from_user.id,
            text,
            reply_markup=keyboard
        )
    
    await callback.answer()

# –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é "—è" (–≤ –ª–∏—á–∫–µ –∏ –≤ —á–∞—Ç–∞—Ö)
@dp.message(lambda message: message.text and message.text.strip().lower() == "—è")
async def show_self_profile_in_chat(message: Message):
    try:
        remember_user(message.from_user)
    except Exception:
        pass
    user_id = message.from_user.id
    balance = get_balance(user_id)

    users = load_users()
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('balance', 0), reverse=True)

    user_place = 1
    for i, (uid, data) in enumerate(sorted_users, 1):
        if str(uid) == str(user_id):
            user_place = i
            break

    try:
        user_chat = await bot.get_chat(user_id)
        username = f"@{user_chat.username}" if user_chat.username else user_chat.first_name
    except Exception:
        username = f"–ò–≥—Ä–æ–∫ {user_id}"

    medal = "ü•á" if user_place == 1 else "ü•à" if user_place == 2 else "ü•â" if user_place == 3 else f"#{user_place}"

    text = (
        f"üë§ –ü–†–û–§–ò–õ–¨\n\n"
        f"–ò–≥—Ä–æ–∫: {username}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n"
        f"üèÜ –ú–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ: {medal}\n"
        f"üìä –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {len(sorted_users)}"
    )

    await message.answer(text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–æ–∫
@dp.callback_query(F.data.startswith("bet_"))
async def handle_bet_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    balance = get_balance(user_id)
    
    if balance <= 0:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∏–≥—Ä—ã!", show_alert=True)
        return
    
    bet_type = callback.data.replace("bet_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é
    user_bet_selection[str(user_id)] = bet_type
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —Å—Ç–∞–≤–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="5–∫", callback_data=f"amount_{bet_type}_5000"),
         InlineKeyboardButton(text="10–∫", callback_data=f"amount_{bet_type}_10000"),
         InlineKeyboardButton(text="15–∫", callback_data=f"amount_{bet_type}_15000")],
        [InlineKeyboardButton(text="20–∫", callback_data=f"amount_{bet_type}_20000"),
         InlineKeyboardButton(text="25–∫", callback_data=f"amount_{bet_type}_25000")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="roulette_menu")]
    ])
    
    bet_name = {
        "color_red": "–ö—Ä–∞—Å–Ω–æ–µ",
        "color_black": "–ß–µ—Ä–Ω–æ–µ",
        "green": "–ó–µ–ª–µ–Ω–æ–µ (0/00)",
        "even": "–ß–µ—Ç–Ω–æ–µ",
        "odd": "–ù–µ—á–µ—Ç–Ω–æ–µ",
        "low": "1-18",
        "high": "19-36",
        "dozen_1": "1-–π —Å–µ–∫—Ç–æ—Ä (1-12)",
        "dozen_2": "2-–π —Å–µ–∫—Ç–æ—Ä (13-24)",
        "dozen_3": "3-–π —Å–µ–∫—Ç–æ—Ä (25-36)",
        "number": "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ"
    }.get(bet_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.send_message(
        user_id,
        f"üé∞ –°—Ç–∞–≤–∫–∞: {bet_name}\n\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –≤—Ä—É—á–Ω—É—é):",
        reply_markup=keyboard
    )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("amount_"))
async def handle_amount_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    parts = callback.data.split("_")
    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ —Å—É–º–º–∞
    amount = int(parts[-1])
    # –í—Å—ë —á—Ç–æ –º–µ–∂–¥—É "amount" –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º - —ç—Ç–æ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏
    bet_type = "_".join(parts[1:-1])  # color_red, color_black, etc.
    balance = get_balance(user_id)
    
    if balance < amount:
        await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!", show_alert=True)
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—É–º–º—É –∫–Ω–æ–ø–∫–æ–π
    if str(user_id) in user_bet_selection:
        del user_bet_selection[str(user_id)]
    
    if bet_type == "number":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞ (1-36, 0, 00)
        buttons = []
        
        # –ß–∏—Å–ª–∞ 1-36 –ø–æ 6 –≤ —Ä—è–¥
        for row in range(6):
            row_buttons = []
            for col in range(6):
                num = row * 6 + col + 1
                if num <= 36:
                    row_buttons.append(InlineKeyboardButton(text=str(num), callback_data=f"num_{num}_{amount}"))
            if row_buttons:
                buttons.append(row_buttons)
        
        # –î–æ–±–∞–≤–ª—è–µ–º 0 –∏ 00
        buttons.append([
            InlineKeyboardButton(text="00", callback_data=f"num_37_{amount}"),
            InlineKeyboardButton(text="0", callback_data=f"num_0_{amount}")
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="roulette_menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot.send_message(
            user_id,
            f"üéØ –°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ:",
            reply_markup=keyboard
        )
    else:
        # –ü—Ä—è–º–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        await spin_roulette_game(callback, bet_type, amount, user_id)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("num_"))
async def handle_number_choice(callback: CallbackQuery):
    parts = callback.data.split("_")
    number = int(parts[1])
    amount = int(parts[2])
    user_id = callback.from_user.id
    
    bet_type = f"number_{number}"
    await spin_roulette_game(callback, bet_type, amount, user_id)
    await callback.answer()

async def spin_roulette_game(callback: CallbackQuery, bet_type: str, amount: int, user_id: int):
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É)
    update_balance(user_id, -amount)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    message = await bot.send_message(
        user_id,
        "üé∞ –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...\n"
        "‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
    )
    
    # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
    await asyncio.sleep(2)
    
    # –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
    winning_number = spin_roulette()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –Ω–æ–º–µ—Ä –≤—ã–∏–≥—Ä—ã—à–∞
    number_display = "00" if winning_number == 37 else str(winning_number)
    color = get_color(winning_number)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    try:
        await message.delete()
    except:
        pass
    
    # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
    payout = calculate_payout(bet_type, amount, winning_number)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="roulette_menu")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    if payout > 0:
        update_balance(user_id, payout)
        new_balance = get_balance(user_id)
        
        text = (
            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n\n"
            f"üí∞ –í—ã–∏–≥—Ä—ã—à: {payout} –º–æ–Ω–µ—Ç\n"
            f"üìä –°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç\n"
            f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n\n"
            f"–í—ã–ø–∞–ª–æ: {number_display} ({color})"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        photo_win = None
        if os.path.exists(PHOTO_WIN):
            photo_win = PHOTO_WIN
        elif os.path.exists(PHOTO_WIN.replace(".jpg", ".png")):
            photo_win = PHOTO_WIN.replace(".jpg", ".png")
        elif os.path.exists(PHOTO_WIN.replace(".jpg", ".jpeg")):
            photo_win = PHOTO_WIN.replace(".jpg", ".jpeg")
        
        if photo_win:
            await bot.send_photo(user_id, FSInputFile(photo_win), caption=text, reply_markup=keyboard)
        else:
            await bot.send_message(user_id, text, reply_markup=keyboard)
    else:
        new_balance = get_balance(user_id)
        
        text = (
            f"üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n\n"
            f"üìä –ü–æ—Ç–µ—Ä—è–Ω–æ: {amount} –º–æ–Ω–µ—Ç\n"
            f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n\n"
            f"–í—ã–ø–∞–ª–æ: {number_display} ({color})"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        photo_lose = None
        if os.path.exists(PHOTO_LOSE):
            photo_lose = PHOTO_LOSE
        elif os.path.exists(PHOTO_LOSE.replace(".jpg", ".png")):
            photo_lose = PHOTO_LOSE.replace(".jpg", ".png")
        elif os.path.exists(PHOTO_LOSE.replace(".jpg", ".jpeg")):
            photo_lose = PHOTO_LOSE.replace(".jpg", ".jpeg")
        
        if photo_lose:
            await bot.send_photo(user_id, FSInputFile(photo_lose), caption=text, reply_markup=keyboard)
        else:
            await bot.send_message(user_id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫ –∏ —á–∞—Ç–∞: —Ä–µ–∞–≥–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û –Ω–∞ —Å—Ç–∞–≤–∫–∏/—Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—á–µ–µ
@dp.message(lambda message: message.text and not message.text.startswith('/'))
async def handle_text_bet(message: Message):
    user_id = message.from_user.id
    try:
        remember_user(message.from_user)
    except Exception:
        pass
    balance = get_balance(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    if user_id == ADMIN_ID:
        text_raw = message.text.strip()
        words = text_raw.split()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–æ–π –∞–¥–º–∏–Ω–∞ (ID —á–∏—Å–ª–æ) 
        if len(words) == 2:
            try:
                target_user_id = int(words[0])
                new_amount = int(words[1])
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                old_balance = get_balance(target_user_id)
                users = load_users()
                users[str(target_user_id)] = {'balance': new_amount}
                save_users(users)
                
                await message.answer(
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω!\n\n"
                    f"üë§ ID: {target_user_id}\n"
                    f"üí∞ –ë—ã–ª–æ: {old_balance}\n"
                    f"üí∞ –°—Ç–∞–ª–æ: {new_amount}"
                )
                return
            except ValueError:
                pass  # –ù–µ –∫–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—É—é —Å—Ç–∞–≤–∫—É
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ "—è" –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º ‚Äî –∑–¥–µ—Å—å –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if message.text.strip().lower() == "—è":
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–∞–≤–∫—É –∫–Ω–æ–ø–∫–æ–π –∏ –≤–≤–æ–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å—É–º–º—É
    if str(user_id) in user_bet_selection and message.text.strip().isdigit():
        amount = int(message.text.strip())
        bet_type = user_bet_selection[str(user_id)]
        
        if balance < amount:
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
            return
        
        if amount <= 0:
            await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 1 –º–æ–Ω–µ—Ç–∞!")
            return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π –∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º–æ–π
        await message.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é —Ä—É–ª–µ—Ç–∫—É...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π callback –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
        class FakeCallback:
            def __init__(self, message):
                self.message = message
        
        fake_callback = FakeCallback(message)
        await spin_roulette_game(fake_callback, bet_type, amount, user_id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É
        if str(user_id) in user_bet_selection:
            del user_bet_selection[str(user_id)]
        
        return
    
    # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—Å—Ç —Å—Ç–∞–≤–∫–∏
    text = message.text.strip().lower()
    words = text.split()
    
    if len(words) < 2:
        # –ù–µ —Å—Ç–∞–≤–∫–∞ ‚Äî –º–æ–ª—á–∞ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    try:
        amount = int(words[-1])
        # –í—Å–µ —Å–ª–æ–≤–∞ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ - —ç—Ç–æ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏
        bet_strategy = " ".join(words[:-1])
    except ValueError:
        # –ù–µ —Å—Ç–∞–≤–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    if balance < amount:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    
    if amount <= 0:
        await message.answer("‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ - 1 –º–æ–Ω–µ—Ç–∞!")
        return
    
    # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç–∞–≤–æ–∫ (—É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã)
    valid_bets = ["–∫—Ä–∞—Å–Ω–æ–µ", "—á–µ—Ä–Ω–æ–µ", "red", "black", "—Ä–µ–¥", "–±–ª–µ–∫",
                   "—á–µ—Ç", "–Ω–µ—á–µ—Ç", "—á–µ—Ç–Ω–æ–µ", "–Ω–µ—á–µ—Ç–Ω–æ–µ",
                   "–∑–µ—Ä–æ", "0", "00",
                   "1-18", "19-36",
                   "1–¥", "2–¥", "3–¥", "1—Å—Ç", "2—Å—Ç", "3—Å—Ç", "1—Å–µ–∫—Ç–æ—Ä", "2—Å–µ–∫—Ç–æ—Ä", "3—Å–µ–∫—Ç–æ—Ä"]
    
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ bet_strategy –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    bet_strategy_clean = bet_strategy.replace(" ", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ–º (–ø—Ä—è–º–∞—è —Å—Ç–∞–≤–∫–∞)
    is_number_bet = bet_strategy_clean.isdigit() or bet_strategy_clean in ["0", "00"]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
    if bet_strategy_clean in valid_bets or is_number_bet:
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (—Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É)
        update_balance(user_id, -amount)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é "–∫—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É"
        anim_message = await message.answer(
            "üé∞ –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...\n"
            "‚è≥ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è..."
        )
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
        await asyncio.sleep(2)
        
        # –ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É
        winning_number = spin_roulette()
        number_display = "00" if winning_number == 37 else str(winning_number)
        color = get_color(winning_number)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        try:
            await anim_message.delete()
        except:
            pass
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è)
        payout = calculate_payout(bet_strategy_clean, amount, winning_number)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé∞ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="roulette_menu")],
            [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
        
        if payout > 0:
            update_balance(user_id, payout)
            new_balance = get_balance(user_id)
            
            text = (
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!\n\n"
                f"üí∞ –í—ã–∏–≥—Ä—ã—à: {payout} –º–æ–Ω–µ—Ç\n"
                f"üìä –°—Ç–∞–≤–∫–∞: {amount} –º–æ–Ω–µ—Ç\n"
                f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n\n"
                f"–í—ã–ø–∞–ª–æ: {number_display} ({color})"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            photo_win = None
            if os.path.exists(PHOTO_WIN):
                photo_win = PHOTO_WIN
            elif os.path.exists(PHOTO_WIN.replace(".jpg", ".png")):
                photo_win = PHOTO_WIN.replace(".jpg", ".png")
            elif os.path.exists(PHOTO_WIN.replace(".jpg", ".jpeg")):
                photo_win = PHOTO_WIN.replace(".jpg", ".jpeg")
            
            if photo_win:
                await message.answer_photo(FSInputFile(photo_win), caption=text, reply_markup=keyboard)
            else:
                await message.answer(text, reply_markup=keyboard)
        else:
            new_balance = get_balance(user_id)
            
            text = (
                f"üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n\n"
                f"üìä –ü–æ—Ç–µ—Ä—è–Ω–æ: {amount} –º–æ–Ω–µ—Ç\n"
                f"üíé –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç\n\n"
                f"–í—ã–ø–∞–ª–æ: {number_display} ({color})"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            photo_lose = None
            if os.path.exists(PHOTO_LOSE):
                photo_lose = PHOTO_LOSE
            elif os.path.exists(PHOTO_LOSE.replace(".jpg", ".png")):
                photo_lose = PHOTO_LOSE.replace(".jpg", ".png")
            elif os.path.exists(PHOTO_LOSE.replace(".jpg", ".jpeg")):
                photo_lose = PHOTO_LOSE.replace(".jpg", ".jpeg")
            
            if photo_lose:
                await message.answer_photo(FSInputFile(photo_lose), caption=text, reply_markup=keyboard)
            else:
                await message.answer(text, reply_markup=keyboard)
    else:
        # –ù–µ —Å—Ç–∞–≤–∫–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, —á—Ç–æ–±—ã —á–∞—Ç –º–æ–≥ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å
        return

# –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å —á–∞—Ç—É; /start —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Ç–¥–µ–ª—å–Ω—ã–º —Ö–µ–Ω–¥–ª–µ—Ä–æ–º
@dp.message(lambda message: message.text and message.text.startswith('/') and not message.text.startswith('/start') and not message.text.startswith('/pay'))
async def handle_unknown_command(message: Message):
    return

# –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
@dp.callback_query(F.data == "top_players")
async def show_top_players(callback: CallbackQuery):
    await callback.answer()
    
    users = load_users()
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É
    sorted_users = sorted(users.items(), key=lambda x: x[1].get('balance', 0), reverse=True)
    
    # –ë–µ—Ä–µ–º —Ç–æ–ø 10
    top_users = sorted_users[:10]
    
    if not top_users:
        text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n\n" \
               "–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ."
    else:
        text = "üèÜ –¢–û–ü –ò–ì–†–û–ö–û–í\n\n"
        for i, (user_id, data) in enumerate(top_users, 1):
            balance = data.get('balance', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback
            username = f"–ò–≥—Ä–æ–∫ {user_id}"
            try:
                user_chat = await bot.get_chat(int(user_id))
                if user_chat.username:
                    username = f"@{user_chat.username}"
                elif user_chat.first_name:
                    username = user_chat.first_name
            except:
                pass
            
            # –≠–º–æ–¥–∑–∏ –¥–ª—è –º–µ—Å—Ç–∞
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            
            text += f"{medal} {username}: {balance} –º–æ–Ω–µ—Ç\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ —Ç–æ–ø-–ª–∏—Å—Ç–∞
    photo_path = os.path.join(PHOTOS_DIR, "top_players.jpg")
    photo_exists = False
    
    if os.path.exists(photo_path):
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".png")):
        photo_path = photo_path.replace(".jpg", ".png")
        photo_exists = True
    elif os.path.exists(photo_path.replace(".jpg", ".jpeg")):
        photo_path = photo_path.replace(".jpg", ".jpeg")
        photo_exists = True
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await callback.message.delete()
    except:
        pass
    
    if photo_exists:
        await bot.send_photo(callback.from_user.id, FSInputFile(photo_path), caption=text, reply_markup=keyboard)
    else:
        await bot.send_message(callback.from_user.id, text, reply_markup=keyboard)

# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.callback_query(F.data == "admin_panel")
async def admin_panel(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!", show_alert=True)
        return
    
    users = load_users()
    total_users = len(users)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_balance = sum(user_data.get('balance', 0) for user_data in users.values())
    
    text = (
        f"üîß –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨\n\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üë• –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: {total_users}\n"
        f"üí∞ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: {total_balance} –º–æ–Ω–µ—Ç\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –í—Å–µ –∏–≥—Ä–æ–∫–∏", callback_data="admin_all_users")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="admin_change_balance")],
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])
    
    # –£–±–∏—Ä–∞–µ–º —Ñ–æ—Ç–æ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    await callback.message.edit_text(text, reply_markup=keyboard)
    
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∞–¥–º–∏–Ω)
@dp.callback_query(F.data == "admin_all_users")
async def admin_all_users(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    users = load_users()
    
    if not users:
        text = "üìã –°–ü–ò–°–û–ö –ò–ì–†–û–ö–û–í\n\n–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤."
    else:
        text = "üìã –°–ü–ò–°–û–ö –í–°–ï–• –ò–ì–†–û–ö–û–í\n\n"
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–∞–ª–∞–Ω—Å—É
        sorted_users = sorted(users.items(), key=lambda x: x[1].get('balance', 0), reverse=True)
        
        for user_id_str, data in sorted_users:
            balance = data.get('balance', 0)
            
            username = f"ID: {user_id_str}"
            try:
                user_chat = await bot.get_chat(int(user_id_str))
                if user_chat.username:
                    username = f"@{user_chat.username} ({user_id_str})"
                elif user_chat.first_name:
                    username = f"{user_chat.first_name} ({user_id_str})"
            except:
                pass
            
            text += f"üë§ {username}: {balance} –º–æ–Ω–µ—Ç\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

# –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.callback_query(F.data == "admin_change_balance")
async def admin_change_balance(callback: CallbackQuery):
    user_id = callback.from_user.id
    
    if user_id != ADMIN_ID:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üí∞ –ò–ó–ú–ï–ù–ò–¢–¨ –ë–ê–õ–ê–ù–°\n\n"
        "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º–∞`\n\n"
        "–ü—Ä–∏–º–µ—Ä: `123456789 5000`\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"
    )
    await callback.answer()

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

